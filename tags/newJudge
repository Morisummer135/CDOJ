!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
APPBUFSIZ	../branches/newJudge/include/AppException.h	25;"	d
AppException	../branches/newJudge/include/AppException.h	/^	AppException(const std::string& _message);$/;"	p	class:AppException	access:public	signature:(const std::string& _message)
AppException	../branches/newJudge/include/AppException.h	/^	AppException(void);$/;"	p	class:AppException	access:public	signature:(void)
AppException	../branches/newJudge/include/AppException.h	/^class AppException {$/;"	c
AppException	../branches/newJudge/src/AppException.cc	/^AppException::AppException(const std::string& _message)$/;"	f	class:AppException	signature:(const std::string& _message)
AppException	../branches/newJudge/src/AppException.cc	/^AppException::AppException(void) {$/;"	f	class:AppException	signature:(void)
AppException::AppException	../branches/newJudge/include/AppException.h	/^	AppException(const std::string& _message);$/;"	p	class:AppException	access:public	signature:(const std::string& _message)
AppException::AppException	../branches/newJudge/include/AppException.h	/^	AppException(void);$/;"	p	class:AppException	access:public	signature:(void)
AppException::AppException	../branches/newJudge/src/AppException.cc	/^AppException::AppException(const std::string& _message)$/;"	f	class:AppException	signature:(const std::string& _message)
AppException::AppException	../branches/newJudge/src/AppException.cc	/^AppException::AppException(void) {$/;"	f	class:AppException	signature:(void)
AppException::_message	../branches/newJudge/include/AppException.h	/^	std::string _message;$/;"	m	class:AppException	access:private
AppException::message	../branches/newJudge/include/AppException.h	/^	const char* message(void) const;$/;"	p	class:AppException	access:public	signature:(void) const
AppException::message	../branches/newJudge/src/AppException.cc	/^const char* AppException::message(void) const {$/;"	f	class:AppException	signature:(void) const
AppException::printStackTrace	../branches/newJudge/include/AppException.h	/^	void printStackTrace(void) const;$/;"	p	class:AppException	access:public	signature:(void) const
AppException::printStackTrace	../branches/newJudge/src/AppException.cc	/^void AppException::printStackTrace(void) const {$/;"	f	class:AppException	signature:(void) const
AppException::~AppException	../branches/newJudge/include/AppException.h	/^	~AppException(void);$/;"	p	class:AppException	access:public	signature:(void)
AppException::~AppException	../branches/newJudge/src/AppException.cc	/^AppException::~AppException(void) {$/;"	f	class:AppException	signature:(void)
BIN_DIR	../branches/newJudge/Makefile	/^BIN_DIR=$(DIR)\/bin$/;"	m
BUFFER_SIZE	../branches/newJudge/include/BufferedIO.h	27;"	d
BUFFSIZE	../branches/newJudge/include/Logger.h	25;"	d
BufferedIO	../branches/newJudge/include/BufferedIO.h	/^	BufferedIO();$/;"	p	class:BufferedIO	access:public	signature:()
BufferedIO	../branches/newJudge/include/BufferedIO.h	/^	BufferedIO(const char* fileName) throw(AppException);$/;"	p	class:BufferedIO	access:public	signature:(const char* fileName)
BufferedIO	../branches/newJudge/include/BufferedIO.h	/^	BufferedIO(int fd);$/;"	p	class:BufferedIO	access:public	signature:(int fd)
BufferedIO	../branches/newJudge/include/BufferedIO.h	/^class BufferedIO {$/;"	c
BufferedIO	../branches/newJudge/src/BufferedIO.cc	/^BufferedIO::BufferedIO() {$/;"	f	class:BufferedIO	signature:()
BufferedIO	../branches/newJudge/src/BufferedIO.cc	/^BufferedIO::BufferedIO(const char* fileName) throw(AppException) : BufferedIO() {$/;"	f	class:BufferedIO	signature:(const char* fileName)
BufferedIO	../branches/newJudge/src/BufferedIO.cc	/^BufferedIO::BufferedIO(int fd)$/;"	f	class:BufferedIO	signature:(int fd)
BufferedIO::BufferedIO	../branches/newJudge/include/BufferedIO.h	/^	BufferedIO();$/;"	p	class:BufferedIO	access:public	signature:()
BufferedIO::BufferedIO	../branches/newJudge/include/BufferedIO.h	/^	BufferedIO(const char* fileName) throw(AppException);$/;"	p	class:BufferedIO	access:public	signature:(const char* fileName)
BufferedIO::BufferedIO	../branches/newJudge/include/BufferedIO.h	/^	BufferedIO(int fd);$/;"	p	class:BufferedIO	access:public	signature:(int fd)
BufferedIO::BufferedIO	../branches/newJudge/src/BufferedIO.cc	/^BufferedIO::BufferedIO() {$/;"	f	class:BufferedIO	signature:()
BufferedIO::BufferedIO	../branches/newJudge/src/BufferedIO.cc	/^BufferedIO::BufferedIO(const char* fileName) throw(AppException) : BufferedIO() {$/;"	f	class:BufferedIO	signature:(const char* fileName)
BufferedIO::BufferedIO	../branches/newJudge/src/BufferedIO.cc	/^BufferedIO::BufferedIO(int fd)$/;"	f	class:BufferedIO	signature:(int fd)
BufferedIO::buffer	../branches/newJudge/include/BufferedIO.h	/^	char* buffer;$/;"	m	class:BufferedIO	access:public
BufferedIO::fd	../branches/newJudge/include/BufferedIO.h	/^	int fd;$/;"	m	class:BufferedIO	access:protected
BufferedIO::~BufferedIO	../branches/newJudge/include/BufferedIO.h	/^	virtual ~BufferedIO();$/;"	p	class:BufferedIO	access:public	signature:()
BufferedIO::~BufferedIO	../branches/newJudge/src/BufferedIO.cc	/^BufferedIO::~BufferedIO() {$/;"	f	class:BufferedIO	signature:()
BufferedReader	../branches/newJudge/include/BufferedReader.h	/^	BufferedReader(const char* fileName) throw(AppException);$/;"	p	class:BufferedReader	access:public	signature:(const char* fileName)
BufferedReader	../branches/newJudge/include/BufferedReader.h	/^	BufferedReader(const int& fd);$/;"	p	class:BufferedReader	access:public	signature:(const int& fd)
BufferedReader	../branches/newJudge/include/BufferedReader.h	/^class BufferedReader : public BufferedIO {$/;"	c	inherits:BufferedIO
BufferedReader	../branches/newJudge/src/BufferedReader.cc	/^BufferedReader::BufferedReader(const char* fileName)$/;"	f	class:BufferedReader	signature:(const char* fileName)
BufferedReader	../branches/newJudge/src/BufferedReader.cc	/^BufferedReader::BufferedReader(const int& fd)$/;"	f	class:BufferedReader	signature:(const int& fd)
BufferedReader::BufferedReader	../branches/newJudge/include/BufferedReader.h	/^	BufferedReader(const char* fileName) throw(AppException);$/;"	p	class:BufferedReader	access:public	signature:(const char* fileName)
BufferedReader::BufferedReader	../branches/newJudge/include/BufferedReader.h	/^	BufferedReader(const int& fd);$/;"	p	class:BufferedReader	access:public	signature:(const int& fd)
BufferedReader::BufferedReader	../branches/newJudge/src/BufferedReader.cc	/^BufferedReader::BufferedReader(const char* fileName)$/;"	f	class:BufferedReader	signature:(const char* fileName)
BufferedReader::BufferedReader	../branches/newJudge/src/BufferedReader.cc	/^BufferedReader::BufferedReader(const int& fd)$/;"	f	class:BufferedReader	signature:(const int& fd)
BufferedReader::next	../branches/newJudge/include/BufferedReader.h	/^	const char* next(void) throw(AppException);$/;"	p	class:BufferedReader	access:public	signature:(void)
BufferedReader::next	../branches/newJudge/src/BufferedReader.cc	/^const char* BufferedReader::next(void) throw(AppException) {$/;"	f	class:BufferedReader	signature:(void)
BufferedReader::readUInt16	../branches/newJudge/include/BufferedReader.h	/^	uint16_t readUInt16(void) throw(AppException);$/;"	p	class:BufferedReader	access:public	signature:(void)
BufferedReader::readUInt16	../branches/newJudge/src/BufferedReader.cc	/^uint16_t BufferedReader::readUInt16(void) throw(AppException) {$/;"	f	class:BufferedReader	signature:(void)
BufferedReader::readUInt32	../branches/newJudge/include/BufferedReader.h	/^	uint32_t readUInt32(void) throw(AppException);$/;"	p	class:BufferedReader	access:public	signature:(void)
BufferedReader::readUInt32	../branches/newJudge/src/BufferedReader.cc	/^uint32_t BufferedReader::readUInt32(void) throw(AppException) {$/;"	f	class:BufferedReader	signature:(void)
BufferedReader::readUInt64	../branches/newJudge/include/BufferedReader.h	/^	uint64_t readUInt64(void) throw(AppException);$/;"	p	class:BufferedReader	access:public	signature:(void)
BufferedReader::readUInt64	../branches/newJudge/src/BufferedReader.cc	/^uint64_t BufferedReader::readUInt64(void) throw(AppException) {$/;"	f	class:BufferedReader	signature:(void)
BufferedReader::readUInt8	../branches/newJudge/include/BufferedReader.h	/^	uint8_t readUInt8(void) throw(AppException);$/;"	p	class:BufferedReader	access:public	signature:(void)
BufferedReader::readUInt8	../branches/newJudge/src/BufferedReader.cc	/^uint8_t BufferedReader::readUInt8(void) throw(AppException) {$/;"	f	class:BufferedReader	signature:(void)
BufferedWriter	../branches/newJudge/include/BufferedWriter.h	/^	BufferedWriter(const char* fileName) throw(AppException);$/;"	p	class:BufferedWriter	access:public	signature:(const char* fileName)
BufferedWriter	../branches/newJudge/include/BufferedWriter.h	/^	BufferedWriter(const int& fd);$/;"	p	class:BufferedWriter	access:public	signature:(const int& fd)
BufferedWriter	../branches/newJudge/include/BufferedWriter.h	/^class BufferedWriter : public BufferedIO {$/;"	c	inherits:BufferedIO
BufferedWriter	../branches/newJudge/src/BufferedWriter.cc	/^BufferedWriter::BufferedWriter(const char* fileName)$/;"	f	class:BufferedWriter	signature:(const char* fileName)
BufferedWriter	../branches/newJudge/src/BufferedWriter.cc	/^BufferedWriter::BufferedWriter(const int& fd)$/;"	f	class:BufferedWriter	signature:(const int& fd)
BufferedWriter::BufferedWriter	../branches/newJudge/include/BufferedWriter.h	/^	BufferedWriter(const char* fileName) throw(AppException);$/;"	p	class:BufferedWriter	access:public	signature:(const char* fileName)
BufferedWriter::BufferedWriter	../branches/newJudge/include/BufferedWriter.h	/^	BufferedWriter(const int& fd);$/;"	p	class:BufferedWriter	access:public	signature:(const int& fd)
BufferedWriter::BufferedWriter	../branches/newJudge/src/BufferedWriter.cc	/^BufferedWriter::BufferedWriter(const char* fileName)$/;"	f	class:BufferedWriter	signature:(const char* fileName)
BufferedWriter::BufferedWriter	../branches/newJudge/src/BufferedWriter.cc	/^BufferedWriter::BufferedWriter(const int& fd)$/;"	f	class:BufferedWriter	signature:(const int& fd)
BufferedWriter::writeUInt16	../branches/newJudge/include/BufferedWriter.h	/^	void writeUInt16(uint16_t value) throw(AppException);$/;"	p	class:BufferedWriter	access:public	signature:(uint16_t value)
BufferedWriter::writeUInt16	../branches/newJudge/src/BufferedWriter.cc	/^void BufferedWriter::writeUInt16(uint16_t value) throw(AppException) {$/;"	f	class:BufferedWriter	signature:(uint16_t value)
BufferedWriter::writeUInt32	../branches/newJudge/include/BufferedWriter.h	/^	void writeUInt32(uint32_t value) throw(AppException);$/;"	p	class:BufferedWriter	access:public	signature:(uint32_t value)
BufferedWriter::writeUInt32	../branches/newJudge/src/BufferedWriter.cc	/^void BufferedWriter::writeUInt32(uint32_t value) throw(AppException) {$/;"	f	class:BufferedWriter	signature:(uint32_t value)
BufferedWriter::writeUInt64	../branches/newJudge/include/BufferedWriter.h	/^	void writeUInt64(uint64_t value) throw(AppException);$/;"	p	class:BufferedWriter	access:public	signature:(uint64_t value)
BufferedWriter::writeUInt64	../branches/newJudge/src/BufferedWriter.cc	/^void BufferedWriter::writeUInt64(uint64_t value) throw(AppException) {$/;"	f	class:BufferedWriter	signature:(uint64_t value)
BufferedWriter::writeUInt8	../branches/newJudge/include/BufferedWriter.h	/^	void writeUInt8(uint8_t value) throw(AppException);$/;"	p	class:BufferedWriter	access:public	signature:(uint8_t value)
BufferedWriter::writeUInt8	../branches/newJudge/src/BufferedWriter.cc	/^void BufferedWriter::writeUInt8(uint8_t value) throw(AppException) {$/;"	f	class:BufferedWriter	signature:(uint8_t value)
CFLAGS	../branches/newJudge/Makefile	/^CFLAGS=-Wall -W -g -O2 $(DEBUG) $(CXXFLAGS)$/;"	m
COMPILER_BUF_SIZE	../branches/newJudge/src/Compiler.cc	23;"	d	file:
COMPILING	../branches/newJudge/src/Compiler.cc	24;"	d	file:
CXX	../branches/newJudge/Makefile	/^CXX=g++$/;"	m
CXXFLAGS	../branches/newJudge/Makefile	/^CXXFLAGS=-std=gnu++11$/;"	m
CXXLD	../branches/newJudge/Makefile	/^CXXLD=g++$/;"	m
Compiler	../branches/newJudge/include/Compiler.h	/^	Compiler(int id, std::string name, std::string extension);$/;"	p	class:Compiler	access:public	signature:(int id, std::string name, std::string extension)
Compiler	../branches/newJudge/include/Compiler.h	/^class Compiler {$/;"	c
Compiler	../branches/newJudge/src/Compiler.cc	/^Compiler::Compiler(int id, std::string name, std::string extension)$/;"	f	class:Compiler	signature:(int id, std::string name, std::string extension)
Compiler::Compiler	../branches/newJudge/include/Compiler.h	/^	Compiler(int id, std::string name, std::string extension);$/;"	p	class:Compiler	access:public	signature:(int id, std::string name, std::string extension)
Compiler::Compiler	../branches/newJudge/src/Compiler.cc	/^Compiler::Compiler(int id, std::string name, std::string extension)$/;"	f	class:Compiler	signature:(int id, std::string name, std::string extension)
Compiler::compile	../branches/newJudge/include/Compiler.h	/^	bool compile(int sockId);$/;"	p	class:Compiler	access:public	signature:(int sockId)
Compiler::compile	../branches/newJudge/include/Compiler.h	/^	virtual bool compile() = 0;$/;"	p	class:Compiler	access:public	signature:()
Compiler::compile	../branches/newJudge/src/Compiler.cc	/^bool Compiler::compile(int sockId) {$/;"	f	class:Compiler	signature:(int sockId)
Compiler::extension	../branches/newJudge/include/Compiler.h	/^	std::string extension;$/;"	m	class:Compiler	access:private
Compiler::getExtension	../branches/newJudge/include/Compiler.h	/^	std::string getExtension(void) const;$/;"	p	class:Compiler	access:public	signature:(void) const
Compiler::getExtension	../branches/newJudge/src/Compiler.cc	/^std::string Compiler::getExtension(void) const {$/;"	f	class:Compiler	signature:(void) const
Compiler::getId	../branches/newJudge/include/Compiler.h	/^	int getId(void) const;$/;"	p	class:Compiler	access:public	signature:(void) const
Compiler::getId	../branches/newJudge/src/Compiler.cc	/^int Compiler::getId(void) const {$/;"	f	class:Compiler	signature:(void) const
Compiler::getName	../branches/newJudge/include/Compiler.h	/^	std::string getName(void) const;$/;"	p	class:Compiler	access:public	signature:(void) const
Compiler::getName	../branches/newJudge/src/Compiler.cc	/^std::string Compiler::getName(void) const {$/;"	f	class:Compiler	signature:(void) const
Compiler::id	../branches/newJudge/include/Compiler.h	/^	int id;$/;"	m	class:Compiler	access:private
Compiler::name	../branches/newJudge/include/Compiler.h	/^	std::string name;$/;"	m	class:Compiler	access:private
Compiler::~Compiler	../branches/newJudge/include/Compiler.h	/^	~Compiler(void);$/;"	p	class:Compiler	access:public	signature:(void)
Compiler::~Compiler	../branches/newJudge/src/Compiler.cc	/^Compiler::~Compiler(void) {$/;"	f	class:Compiler	signature:(void)
CompilerFactory	../branches/newJudge/include/CompilerFactory.h	/^	CompilerFactory(void);$/;"	p	class:CompilerFactory	access:private	signature:(void)
CompilerFactory	../branches/newJudge/include/CompilerFactory.h	/^class CompilerFactory {$/;"	c
CompilerFactory	../branches/newJudge/src/CompilerFactory.cc	/^CompilerFactory::CompilerFactory(void) {$/;"	f	class:CompilerFactory	signature:(void)
CompilerFactory::CompilerFactory	../branches/newJudge/include/CompilerFactory.h	/^	CompilerFactory(void);$/;"	p	class:CompilerFactory	access:private	signature:(void)
CompilerFactory::CompilerFactory	../branches/newJudge/src/CompilerFactory.cc	/^CompilerFactory::CompilerFactory(void) {$/;"	f	class:CompilerFactory	signature:(void)
CompilerFactory::compilers	../branches/newJudge/include/CompilerFactory.h	/^	static std::map<int, const Compiler*> compilers;$/;"	m	class:CompilerFactory	access:private
CompilerFactory::compilers	../branches/newJudge/src/CompilerFactory.cc	/^std::map<int, const Compiler*> CompilerFactory::compilers;$/;"	m	class:CompilerFactory	file:
CompilerFactory::getCompiler	../branches/newJudge/include/CompilerFactory.h	/^	const Compiler* getCompiler(int id) const;$/;"	p	class:CompilerFactory	access:public	signature:(int id) const
CompilerFactory::getCompiler	../branches/newJudge/include/CompilerFactory.h	/^	const Compiler* getCompiler(std::string extension) const;$/;"	p	class:CompilerFactory	access:public	signature:(std::string extension) const
CompilerFactory::getCompiler	../branches/newJudge/src/CompilerFactory.cc	/^const Compiler* CompilerFactory::getCompiler(int id) const {$/;"	f	class:CompilerFactory	signature:(int id) const
CompilerFactory::getCompiler	../branches/newJudge/src/CompilerFactory.cc	/^const Compiler* CompilerFactory::getCompiler(std::string extension) const {$/;"	f	class:CompilerFactory	signature:(std::string extension) const
CompilerFactory::getInstance	../branches/newJudge/include/CompilerFactory.h	/^	static const CompilerFactory* getInstance(void);$/;"	p	class:CompilerFactory	access:public	signature:(void)
CompilerFactory::getInstance	../branches/newJudge/src/CompilerFactory.cc	/^const CompilerFactory* CompilerFactory::getInstance(void) {$/;"	f	class:CompilerFactory	signature:(void)
CompilerFactory::instance	../branches/newJudge/include/CompilerFactory.h	/^	static CompilerFactory* instance;$/;"	m	class:CompilerFactory	access:private
CompilerFactory::instance	../branches/newJudge/src/CompilerFactory.cc	/^CompilerFactory* CompilerFactory::instance = NULL;$/;"	m	class:CompilerFactory	file:
DEBUG	../branches/newJudge/Makefile	/^DEBUG=-g$/;"	m
DEBUG	../branches/newJudge/include/Logger.h	/^	FATAL, WARNING, MONITOR, NOTICE, TRADE, DEBUG, INFO$/;"	e	enum:LoggerFlag
DEPS	../branches/newJudge/Makefile	/^DEPS=$(patsubst $(OBJ_DIR)\/%.o, $(DEPS_DIR)\/%.d, $(OBJS))$/;"	m
DEPS_DIR	../branches/newJudge/Makefile	/^DEPS_DIR=$(DIR)\/deps$/;"	m
DIR	../branches/newJudge/Makefile	/^DIR=$(shell pwd)$/;"	m
EXTENSION	../branches/newJudge/Makefile	/^EXTENSION=cc$/;"	m
FATAL	../branches/newJudge/include/Logger.h	/^	FATAL, WARNING, MONITOR, NOTICE, TRADE, DEBUG, INFO$/;"	e	enum:LoggerFlag
INCLUDE	../branches/newJudge/Makefile	/^INCLUDE=\\$/;"	m
INCLUDE_DIR	../branches/newJudge/Makefile	/^INCLUDE_DIR=$(DIR)\/include$/;"	m
INFO	../branches/newJudge/include/Logger.h	/^	FATAL, WARNING, MONITOR, NOTICE, TRADE, DEBUG, INFO$/;"	e	enum:LoggerFlag
INTERNAL_ERROR	../branches/newJudge/src/Compiler.cc	25;"	d	file:
LDFLAGS	../branches/newJudge/Makefile	/^LDFLAGS=$(DEBUG) $(CXXFLAGS)$/;"	m
LIB_DIR	../branches/newJudge/Makefile	/^LIB_DIR=$(DIR)\/lib$/;"	m
LOG_DIR	../branches/newJudge/Makefile	/^LOG_DIR=$(DIR)\/log$/;"	m
LOG_LEVEL_NOTE	../branches/newJudge/src/Logger.cc	/^static char LOG_LEVEL_NOTE[][10]	=$/;"	v	file:
Logger	../branches/newJudge/include/Logger.h	/^	Logger();$/;"	p	class:Logger	access:private	signature:()
Logger	../branches/newJudge/include/Logger.h	/^class Logger {$/;"	c
Logger	../branches/newJudge/src/Logger.cc	/^Logger::Logger() {$/;"	f	class:Logger	signature:()
Logger::Logger	../branches/newJudge/include/Logger.h	/^	Logger();$/;"	p	class:Logger	access:private	signature:()
Logger::Logger	../branches/newJudge/src/Logger.cc	/^Logger::Logger() {$/;"	f	class:Logger	signature:()
Logger::close	../branches/newJudge/include/Logger.h	/^	void close();$/;"	p	class:Logger	access:public	signature:()
Logger::close	../branches/newJudge/src/Logger.cc	/^void Logger::close(void) {$/;"	f	class:Logger	signature:(void)
Logger::fp	../branches/newJudge/include/Logger.h	/^	FILE* fp;$/;"	m	class:Logger	access:private
Logger::getInstance	../branches/newJudge/include/Logger.h	/^	static Logger* getInstance();$/;"	p	class:Logger	access:public	signature:()
Logger::getInstance	../branches/newJudge/src/Logger.cc	/^Logger* Logger::getInstance(void) {$/;"	f	class:Logger	signature:(void)
Logger::instance	../branches/newJudge/include/Logger.h	/^	static Logger* instance;$/;"	m	class:Logger	access:private
Logger::instance	../branches/newJudge/src/Logger.cc	/^Logger* Logger::instance;$/;"	m	class:Logger	file:
Logger::log	../branches/newJudge/include/Logger.h	/^	void log(LoggerFlag loggerFlag, const char* fmt, ...);$/;"	p	class:Logger	access:public	signature:(LoggerFlag loggerFlag, const char* fmt, ...)
Logger::log	../branches/newJudge/src/Logger.cc	/^void Logger::log(LoggerFlag flag, const char* fmt, ...) {$/;"	f	class:Logger	signature:(LoggerFlag flag, const char* fmt, ...)
Logger::open	../branches/newJudge/include/Logger.h	/^	void open() throw(AppException);$/;"	p	class:Logger	access:public	signature:()
Logger::open	../branches/newJudge/src/Logger.cc	/^void Logger::open(void) throw(AppException) {$/;"	f	class:Logger	signature:(void)
LoggerFlag	../branches/newJudge/include/Logger.h	/^enum LoggerFlag {$/;"	g
MONITOR	../branches/newJudge/include/Logger.h	/^	FATAL, WARNING, MONITOR, NOTICE, TRADE, DEBUG, INFO$/;"	e	enum:LoggerFlag
NOTICE	../branches/newJudge/include/Logger.h	/^	FATAL, WARNING, MONITOR, NOTICE, TRADE, DEBUG, INFO$/;"	e	enum:LoggerFlag
OBJS	../branches/newJudge/Makefile	/^OBJS=$(patsubst $(SRC_DIR)\/%.$(EXTENSION), $(OBJ_DIR)\/%.o,$(wildcard $(SRC_DIR)\/*.$(EXTENSION)))$/;"	m
OBJ_DIR	../branches/newJudge/Makefile	/^OBJ_DIR=$(DIR)\/obj$/;"	m
PROGRAM	../branches/newJudge/Makefile	/^PROGRAM=$(BIN_DIR)\/judgecore$/;"	m
SRC_DIR	../branches/newJudge/Makefile	/^SRC_DIR=$(DIR)\/src$/;"	m
Settings	../branches/newJudge/include/Settings.h	/^	Settings();$/;"	p	class:Settings	access:private	signature:()
Settings	../branches/newJudge/include/Settings.h	/^class Settings {$/;"	c
Settings	../branches/newJudge/src/Settings.cc	/^Settings::Settings() {$/;"	f	class:Settings	signature:()
Settings::Settings	../branches/newJudge/include/Settings.h	/^	Settings();$/;"	p	class:Settings	access:private	signature:()
Settings::Settings	../branches/newJudge/src/Settings.cc	/^Settings::Settings() {$/;"	f	class:Settings	signature:()
Settings::chroot	../branches/newJudge/include/Settings.h	/^	void chroot() const throw(AppException);$/;"	p	class:Settings	access:public	signature:() const
Settings::chroot	../branches/newJudge/src/Settings.cc	/^void Settings::chroot(void) const throw(AppException) {$/;"	f	class:Settings	signature:(void) const
Settings::clean	../branches/newJudge/include/Settings.h	/^	void clean(int fd) const throw(AppException);$/;"	p	class:Settings	access:public	signature:(int fd) const
Settings::clean	../branches/newJudge/src/Settings.cc	/^void Settings::clean(int fd) const throw(AppException) {$/;"	f	class:Settings	signature:(int fd) const
Settings::dataDir	../branches/newJudge/include/Settings.h	/^	std::string dataDir;$/;"	m	class:Settings	access:private
Settings::getDataDir	../branches/newJudge/include/Settings.h	/^	std::string getDataDir() const;$/;"	p	class:Settings	access:public	signature:() const
Settings::getDataDir	../branches/newJudge/src/Settings.cc	/^std::string Settings::getDataDir(void) const {$/;"	f	class:Settings	signature:(void) const
Settings::getInstance	../branches/newJudge/include/Settings.h	/^	static const Settings* getInstance();$/;"	p	class:Settings	access:public	signature:()
Settings::getInstance	../branches/newJudge/src/Settings.cc	/^const Settings* Settings::getInstance() {$/;"	f	class:Settings	signature:()
Settings::getLogFile	../branches/newJudge/include/Settings.h	/^	std::string getLogFile() const;$/;"	p	class:Settings	access:public	signature:() const
Settings::getLogFile	../branches/newJudge/src/Settings.cc	/^std::string Settings::getLogFile(void) const {$/;"	f	class:Settings	signature:(void) const
Settings::getTempDir	../branches/newJudge/include/Settings.h	/^	std::string getTempDir() const;$/;"	p	class:Settings	access:public	signature:() const
Settings::getTempDir	../branches/newJudge/src/Settings.cc	/^std::string Settings::getTempDir(void) const {$/;"	f	class:Settings	signature:(void) const
Settings::instance	../branches/newJudge/include/Settings.h	/^	static Settings* instance;$/;"	m	class:Settings	access:private
Settings::instance	../branches/newJudge/src/Settings.cc	/^Settings* Settings::instance;$/;"	m	class:Settings	file:
Settings::logFile	../branches/newJudge/include/Settings.h	/^	std::string logFile;$/;"	m	class:Settings	access:private
Settings::tempDir	../branches/newJudge/include/Settings.h	/^	std::string tempDir;$/;"	m	class:Settings	access:private
TRADE	../branches/newJudge/include/Logger.h	/^	FATAL, WARNING, MONITOR, NOTICE, TRADE, DEBUG, INFO$/;"	e	enum:LoggerFlag
WARNING	../branches/newJudge/include/Logger.h	/^	FATAL, WARNING, MONITOR, NOTICE, TRADE, DEBUG, INFO$/;"	e	enum:LoggerFlag
__APPEXCEPTION_H__	../branches/newJudge/include/AppException.h	20;"	d
__BUFFERED_IO_H__	../branches/newJudge/include/BufferedIO.h	20;"	d
__BUFFERED_READER_H__	../branches/newJudge/include/BufferedReader.h	20;"	d
__BUFFERED_WRITER_H__	../branches/newJudge/include/BufferedWriter.h	20;"	d
__COMPILER_FACTORY_H__	../branches/newJudge/include/CompilerFactory.h	20;"	d
__COMPILER_H__	../branches/newJudge/include/Compiler.h	20;"	d
__LOGGER_H__	../branches/newJudge/include/Logger.h	20;"	d
__SETTINGS_H__	../branches/newJudge/include/Settings.h	20;"	d
_message	../branches/newJudge/include/AppException.h	/^	std::string _message;$/;"	m	class:AppException	access:private
buffer	../branches/newJudge/include/BufferedIO.h	/^	char* buffer;$/;"	m	class:BufferedIO	access:public
chroot	../branches/newJudge/include/Settings.h	/^	void chroot() const throw(AppException);$/;"	p	class:Settings	access:public	signature:() const
chroot	../branches/newJudge/src/Settings.cc	/^void Settings::chroot(void) const throw(AppException) {$/;"	f	class:Settings	signature:(void) const
clean	../branches/newJudge/include/Settings.h	/^	void clean(int fd) const throw(AppException);$/;"	p	class:Settings	access:public	signature:(int fd) const
clean	../branches/newJudge/src/Settings.cc	/^void Settings::clean(int fd) const throw(AppException) {$/;"	f	class:Settings	signature:(int fd) const
close	../branches/newJudge/include/Logger.h	/^	void close();$/;"	p	class:Logger	access:public	signature:()
close	../branches/newJudge/src/Logger.cc	/^void Logger::close(void) {$/;"	f	class:Logger	signature:(void)
compile	../branches/newJudge/include/Compiler.h	/^	bool compile(int sockId);$/;"	p	class:Compiler	access:public	signature:(int sockId)
compile	../branches/newJudge/include/Compiler.h	/^	virtual bool compile() = 0;$/;"	p	class:Compiler	access:public	signature:()
compile	../branches/newJudge/src/Compiler.cc	/^bool Compiler::compile(int sockId) {$/;"	f	class:Compiler	signature:(int sockId)
compilers	../branches/newJudge/include/CompilerFactory.h	/^	static std::map<int, const Compiler*> compilers;$/;"	m	class:CompilerFactory	access:private
compilers	../branches/newJudge/src/CompilerFactory.cc	/^std::map<int, const Compiler*> CompilerFactory::compilers;$/;"	m	class:CompilerFactory	file:
dataDir	../branches/newJudge/include/Settings.h	/^	std::string dataDir;$/;"	m	class:Settings	access:private
extension	../branches/newJudge/include/Compiler.h	/^	std::string extension;$/;"	m	class:Compiler	access:private
fd	../branches/newJudge/include/BufferedIO.h	/^	int fd;$/;"	m	class:BufferedIO	access:protected
fp	../branches/newJudge/include/Logger.h	/^	FILE* fp;$/;"	m	class:Logger	access:private
getCompiler	../branches/newJudge/include/CompilerFactory.h	/^	const Compiler* getCompiler(int id) const;$/;"	p	class:CompilerFactory	access:public	signature:(int id) const
getCompiler	../branches/newJudge/include/CompilerFactory.h	/^	const Compiler* getCompiler(std::string extension) const;$/;"	p	class:CompilerFactory	access:public	signature:(std::string extension) const
getCompiler	../branches/newJudge/src/CompilerFactory.cc	/^const Compiler* CompilerFactory::getCompiler(int id) const {$/;"	f	class:CompilerFactory	signature:(int id) const
getCompiler	../branches/newJudge/src/CompilerFactory.cc	/^const Compiler* CompilerFactory::getCompiler(std::string extension) const {$/;"	f	class:CompilerFactory	signature:(std::string extension) const
getDataDir	../branches/newJudge/include/Settings.h	/^	std::string getDataDir() const;$/;"	p	class:Settings	access:public	signature:() const
getDataDir	../branches/newJudge/src/Settings.cc	/^std::string Settings::getDataDir(void) const {$/;"	f	class:Settings	signature:(void) const
getExtension	../branches/newJudge/include/Compiler.h	/^	std::string getExtension(void) const;$/;"	p	class:Compiler	access:public	signature:(void) const
getExtension	../branches/newJudge/src/Compiler.cc	/^std::string Compiler::getExtension(void) const {$/;"	f	class:Compiler	signature:(void) const
getId	../branches/newJudge/include/Compiler.h	/^	int getId(void) const;$/;"	p	class:Compiler	access:public	signature:(void) const
getId	../branches/newJudge/src/Compiler.cc	/^int Compiler::getId(void) const {$/;"	f	class:Compiler	signature:(void) const
getInstance	../branches/newJudge/include/CompilerFactory.h	/^	static const CompilerFactory* getInstance(void);$/;"	p	class:CompilerFactory	access:public	signature:(void)
getInstance	../branches/newJudge/include/Logger.h	/^	static Logger* getInstance();$/;"	p	class:Logger	access:public	signature:()
getInstance	../branches/newJudge/include/Settings.h	/^	static const Settings* getInstance();$/;"	p	class:Settings	access:public	signature:()
getInstance	../branches/newJudge/src/CompilerFactory.cc	/^const CompilerFactory* CompilerFactory::getInstance(void) {$/;"	f	class:CompilerFactory	signature:(void)
getInstance	../branches/newJudge/src/Logger.cc	/^Logger* Logger::getInstance(void) {$/;"	f	class:Logger	signature:(void)
getInstance	../branches/newJudge/src/Settings.cc	/^const Settings* Settings::getInstance() {$/;"	f	class:Settings	signature:()
getLogFile	../branches/newJudge/include/Settings.h	/^	std::string getLogFile() const;$/;"	p	class:Settings	access:public	signature:() const
getLogFile	../branches/newJudge/src/Settings.cc	/^std::string Settings::getLogFile(void) const {$/;"	f	class:Settings	signature:(void) const
getName	../branches/newJudge/include/Compiler.h	/^	std::string getName(void) const;$/;"	p	class:Compiler	access:public	signature:(void) const
getName	../branches/newJudge/src/Compiler.cc	/^std::string Compiler::getName(void) const {$/;"	f	class:Compiler	signature:(void) const
getTempDir	../branches/newJudge/include/Settings.h	/^	std::string getTempDir() const;$/;"	p	class:Settings	access:public	signature:() const
getTempDir	../branches/newJudge/src/Settings.cc	/^std::string Settings::getTempDir(void) const {$/;"	f	class:Settings	signature:(void) const
id	../branches/newJudge/include/Compiler.h	/^	int id;$/;"	m	class:Compiler	access:private
instance	../branches/newJudge/include/CompilerFactory.h	/^	static CompilerFactory* instance;$/;"	m	class:CompilerFactory	access:private
instance	../branches/newJudge/include/Logger.h	/^	static Logger* instance;$/;"	m	class:Logger	access:private
instance	../branches/newJudge/include/Settings.h	/^	static Settings* instance;$/;"	m	class:Settings	access:private
instance	../branches/newJudge/src/CompilerFactory.cc	/^CompilerFactory* CompilerFactory::instance = NULL;$/;"	m	class:CompilerFactory	file:
instance	../branches/newJudge/src/Logger.cc	/^Logger* Logger::instance;$/;"	m	class:Logger	file:
instance	../branches/newJudge/src/Settings.cc	/^Settings* Settings::instance;$/;"	m	class:Settings	file:
log	../branches/newJudge/include/Logger.h	/^	void log(LoggerFlag loggerFlag, const char* fmt, ...);$/;"	p	class:Logger	access:public	signature:(LoggerFlag loggerFlag, const char* fmt, ...)
log	../branches/newJudge/src/Logger.cc	/^void Logger::log(LoggerFlag flag, const char* fmt, ...) {$/;"	f	class:Logger	signature:(LoggerFlag flag, const char* fmt, ...)
logFile	../branches/newJudge/include/Settings.h	/^	std::string logFile;$/;"	m	class:Settings	access:private
main	../branches/newJudge/src/main.cc	/^int main(int argc, char* argv[]) {$/;"	f	signature:(int argc, char* argv[])
message	../branches/newJudge/include/AppException.h	/^	const char* message(void) const;$/;"	p	class:AppException	access:public	signature:(void) const
message	../branches/newJudge/src/AppException.cc	/^const char* AppException::message(void) const {$/;"	f	class:AppException	signature:(void) const
name	../branches/newJudge/include/Compiler.h	/^	std::string name;$/;"	m	class:Compiler	access:private
next	../branches/newJudge/include/BufferedReader.h	/^	const char* next(void) throw(AppException);$/;"	p	class:BufferedReader	access:public	signature:(void)
next	../branches/newJudge/src/BufferedReader.cc	/^const char* BufferedReader::next(void) throw(AppException) {$/;"	f	class:BufferedReader	signature:(void)
open	../branches/newJudge/include/Logger.h	/^	void open() throw(AppException);$/;"	p	class:Logger	access:public	signature:()
open	../branches/newJudge/src/Logger.cc	/^void Logger::open(void) throw(AppException) {$/;"	f	class:Logger	signature:(void)
printStackTrace	../branches/newJudge/include/AppException.h	/^	void printStackTrace(void) const;$/;"	p	class:AppException	access:public	signature:(void) const
printStackTrace	../branches/newJudge/src/AppException.cc	/^void AppException::printStackTrace(void) const {$/;"	f	class:AppException	signature:(void) const
readUInt16	../branches/newJudge/include/BufferedReader.h	/^	uint16_t readUInt16(void) throw(AppException);$/;"	p	class:BufferedReader	access:public	signature:(void)
readUInt16	../branches/newJudge/src/BufferedReader.cc	/^uint16_t BufferedReader::readUInt16(void) throw(AppException) {$/;"	f	class:BufferedReader	signature:(void)
readUInt32	../branches/newJudge/include/BufferedReader.h	/^	uint32_t readUInt32(void) throw(AppException);$/;"	p	class:BufferedReader	access:public	signature:(void)
readUInt32	../branches/newJudge/src/BufferedReader.cc	/^uint32_t BufferedReader::readUInt32(void) throw(AppException) {$/;"	f	class:BufferedReader	signature:(void)
readUInt64	../branches/newJudge/include/BufferedReader.h	/^	uint64_t readUInt64(void) throw(AppException);$/;"	p	class:BufferedReader	access:public	signature:(void)
readUInt64	../branches/newJudge/src/BufferedReader.cc	/^uint64_t BufferedReader::readUInt64(void) throw(AppException) {$/;"	f	class:BufferedReader	signature:(void)
readUInt8	../branches/newJudge/include/BufferedReader.h	/^	uint8_t readUInt8(void) throw(AppException);$/;"	p	class:BufferedReader	access:public	signature:(void)
readUInt8	../branches/newJudge/src/BufferedReader.cc	/^uint8_t BufferedReader::readUInt8(void) throw(AppException) {$/;"	f	class:BufferedReader	signature:(void)
tempDir	../branches/newJudge/include/Settings.h	/^	std::string tempDir;$/;"	m	class:Settings	access:private
writeUInt16	../branches/newJudge/include/BufferedWriter.h	/^	void writeUInt16(uint16_t value) throw(AppException);$/;"	p	class:BufferedWriter	access:public	signature:(uint16_t value)
writeUInt16	../branches/newJudge/src/BufferedWriter.cc	/^void BufferedWriter::writeUInt16(uint16_t value) throw(AppException) {$/;"	f	class:BufferedWriter	signature:(uint16_t value)
writeUInt32	../branches/newJudge/include/BufferedWriter.h	/^	void writeUInt32(uint32_t value) throw(AppException);$/;"	p	class:BufferedWriter	access:public	signature:(uint32_t value)
writeUInt32	../branches/newJudge/src/BufferedWriter.cc	/^void BufferedWriter::writeUInt32(uint32_t value) throw(AppException) {$/;"	f	class:BufferedWriter	signature:(uint32_t value)
writeUInt64	../branches/newJudge/include/BufferedWriter.h	/^	void writeUInt64(uint64_t value) throw(AppException);$/;"	p	class:BufferedWriter	access:public	signature:(uint64_t value)
writeUInt64	../branches/newJudge/src/BufferedWriter.cc	/^void BufferedWriter::writeUInt64(uint64_t value) throw(AppException) {$/;"	f	class:BufferedWriter	signature:(uint64_t value)
writeUInt8	../branches/newJudge/include/BufferedWriter.h	/^	void writeUInt8(uint8_t value) throw(AppException);$/;"	p	class:BufferedWriter	access:public	signature:(uint8_t value)
writeUInt8	../branches/newJudge/src/BufferedWriter.cc	/^void BufferedWriter::writeUInt8(uint8_t value) throw(AppException) {$/;"	f	class:BufferedWriter	signature:(uint8_t value)
~AppException	../branches/newJudge/include/AppException.h	/^	~AppException(void);$/;"	p	class:AppException	access:public	signature:(void)
~AppException	../branches/newJudge/src/AppException.cc	/^AppException::~AppException(void) {$/;"	f	class:AppException	signature:(void)
~BufferedIO	../branches/newJudge/include/BufferedIO.h	/^	virtual ~BufferedIO();$/;"	p	class:BufferedIO	access:public	signature:()
~BufferedIO	../branches/newJudge/src/BufferedIO.cc	/^BufferedIO::~BufferedIO() {$/;"	f	class:BufferedIO	signature:()
~Compiler	../branches/newJudge/include/Compiler.h	/^	~Compiler(void);$/;"	p	class:Compiler	access:public	signature:(void)
~Compiler	../branches/newJudge/src/Compiler.cc	/^Compiler::~Compiler(void) {$/;"	f	class:Compiler	signature:(void)
